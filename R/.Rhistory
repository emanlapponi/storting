"parl_session", "parl_size", "party_seats_lagting", "party_seats_odelsting",
"transcript", "order", "session", "time", "date", "title", "text"), ]
taler_meta <- arrange(taler_meta, rep_name, date)
View(taler)
View(taler_meta)
all[which(all$last_name == "Austheim"), ]
fuckers <- taler_meta[which(is.na(taler_meta$rep_id) == TRUE &
duplicated(paste(taler_meta$cabinet_short, taler_meta$rep_name)) == FALSE), ]
View(fuckers)
all[which(all$last_name == "Elseth"), ]
all[which(all$last_name == "Sjaastad"), ]
rep_fuckers <- fuckers[duplicated(fuckers$rep_name) == FALSE, 1:27]
View(rep_fuckers)
rm(list = ls());cat("\014");gc()
library(stringr);library(parallel);library(rvest);library(foreach)
html_path <- "/media/martin/Data/getbio/www.stortinget.no/no/Representanter-og-komiteer/Representantene/Representantfordeling/Representant/"
html_files <- list.files(html_path)
html_files <- html_files[-which(grepl("Biography|ProcAndPubl", html_files))]
id_tags <- sapply(strsplit(html_files, "\\="), "[[", 2)
ncores <- detectCores()-2
bios_raw <- lapply(paste0(html_path, html_files), function(x) read_html(x))
# names(bios_raw) <- id_tags
bios_block <- lapply(bios_raw, function(x) (html_nodes(x, "#main-content div .article-content")))
bios_all <- mclapply(bios_block, function(x) html_text(x, trim = TRUE), mc.cores = ncores)
vars <- mclapply(bios_block, function(x) html_text(html_nodes(x, "h3")), mc.cores = ncores)
vars <- mclapply(vars, function(x) str_trim(x))
vars_pattern <- mclapply(vars, function(x) paste0(x, collapse = "|"), mc.cores = ncores)
vars_pattern <- mclapply(vars_pattern, function(x) gsub("^\\||\\|$", "", x), mc.cores = ncores)
#vars_pattern <- mclapply(vars_pattern, function(x) gsub("Litteratur", "Litteratur ", x), mc.cores = ncores)
bios_all <- mclapply(bios_all, function(x) gsub("Litteraturanmelder", "litteraturanmelder", x))
bios_all <- mclapply(bios_all, function(x) gsub("Verv Hammerfest", "verv Hammerfest", x))
bios_all <- mclapply(bios_all, function(x) gsub("Verv Amnesty", "verv Amnesty", x))
bios_all <- mclapply(bios_all, function(x) gsub("Sprog og Litteratur", "Sprog og litteratur", x))
bios_all <- mclapply(bios_all, function(x) gsub("Verv Osloregionens", "verv Osloregionens", x))
bios_all <- mclapply(bios_all, function(x) gsub("Litteraturkritiker", "litteraturkritiker", x))
bios_all <- mclapply(bios_all, function(x) gsub("Litteraturmedarbeider", "litteraturmedarbeider", x))
bios_all <- mclapply(bios_all, function(x) gsub("Verv AUF", "verv AUF", x))
bios_all <- mclapply(bios_all, function(x) gsub("Verv kirkelig", "verv kirkelig", x))
bios_all <- mclapply(bios_all, function(x) gsub("Vervet i UNIFIL", "vervet i UNIFIL", x))
bios_all <- mclapply(bios_all, function(x) gsub("Verveleder", "verveleder", x))
bios_all <- mclapply(bios_all, function(x) gsub("Verv NFF", "verv NFF", x))
bios_all <- mclapply(bios_all, function(x) gsub("Verv Romerike", "verv Romerike", x))
bios_split <- mclapply(1:length(bios_all), function(x) strsplit(bios_all[[x]], vars_pattern[[x]]), mc.cores = ncores)
bios_split <- unlist(bios_split, recursive = FALSE)
bios_split <- mclapply(bios_split, function(x) gsub("[\r\n]", "", x))
bios_split <- mclapply(bios_split, function(x) gsub("[\t]", "", x))
bios_split <- mclapply(bios_split, function(x) str_trim(x))
vars <- mclapply(vars, function(x) str_trim(x), mc.cores = ncores)
vars <- mclapply(vars, function(x) c("id_tag", x[which(nchar(x)!=0)]), mc.cores = ncores)
bios_all[[728]]
bios_split[[728]]
vars[[728]]
vars_pattern[[728]]
for(i in 1:length(vars)){
bios_split[[i]][1] <- id_tags[i]
}
bios <- mclapply(bios_split, function(x) data.frame(rbind(x)), mc.cores = ncores)
for(i in 1:length(bios)){
names(bios[[i]]) <- vars[[i]]
}
m <- levels(factor(unlist(vars)))
for(i in 1:length(bios)){
bios[[i]]$`id_tag` <- ifelse(is.null(bios[[i]]$`id_tag`), NA,
as.character(bios[[i]]$`id_tag`))
}
for(i in 1:length(bios)){
bios[[i]]$`Litteratur` <- ifelse(is.null(bios[[i]]$`Litteratur`), NA,
as.character(bios[[i]]$`Litteratur`))
}
for(i in 1:length(bios)){
bios[[i]]$`Medlemskap i delegasjoner` <- ifelse(is.null(bios[[i]]$`Medlemskap i delegasjoner`), NA,
as.character(bios[[i]]$`Medlemskap i delegasjoner`))
}
for(i in 1:length(bios)){
bios[[i]]$`Medlemskap i gruppestyrer` <- ifelse(is.null(bios[[i]]$`Medlemskap i gruppestyrer`), NA,
as.character(bios[[i]]$`Medlemskap i gruppestyrer`))
}
for(i in 1:length(bios)){
bios[[i]]$`Medlemskap i presidentskapet` <- ifelse(is.null(bios[[i]]$`Medlemskap i presidentskapet`), NA,
as.character(bios[[i]]$`Medlemskap i presidentskapet`))
}
for(i in 1:length(bios)){
bios[[i]]$`Medlemskap i regjering` <- ifelse(is.null(bios[[i]]$`Medlemskap i regjering`), NA,
as.character(bios[[i]]$`Medlemskap i regjering`))
}
for(i in 1:length(bios)){
bios[[i]]$`Medlemskap i spesialkomiteer, interne styrer og utvalg m.m.` <- ifelse(is.null(bios[[i]]$`Medlemskap i spesialkomiteer, interne styrer og utvalg m.m.`),
NA,
as.character(bios[[i]]$`Medlemskap i spesialkomiteer, interne styrer og utvalg m.m.`))
}
for(i in 1:length(bios)){
bios[[i]]$`Medlemskap i stortingskomiteer` <- ifelse(is.null(bios[[i]]$`Medlemskap i stortingskomiteer`), NA,
as.character(bios[[i]]$`Medlemskap i stortingskomiteer`))
}
for(i in 1:length(bios)){
bios[[i]]$`Personalia` <- ifelse(is.null(bios[[i]]$`Personalia`), NA,
as.character(bios[[i]]$`Personalia`))
}
for(i in 1:length(bios)){
bios[[i]]$`Stortingsperioder` <- ifelse(is.null(bios[[i]]$`Stortingsperioder`), NA,
as.character(bios[[i]]$`Stortingsperioder`))
}
for(i in 1:length(bios)){
bios[[i]]$`Utdanning og yrkeserfaring` <- ifelse(is.null(bios[[i]]$`Utdanning og yrkeserfaring`), NA,
as.character(bios[[i]]$`Utdanning og yrkeserfaring`))
}
for(i in 1:length(bios)){
bios[[i]]$`Vararepresentasjoner` <- ifelse(is.null(bios[[i]]$`Vararepresentasjoner`), NA,
as.character(bios[[i]]$`Vararepresentasjoner`))
}
for(i in 1:length(bios)){
bios[[i]]$`Verv` <- ifelse(is.null(bios[[i]]$`Verv`), NA,
as.character(bios[[i]]$`Verv`))
}
all <- do.call(rbind, bios)
rownames(all) <- 1:nrow(all)
name <- mclapply(bios_raw, function(x) (x %>% html_nodes("h1") %>% html_text()), mc.cores = ncores)
name <- str_trim(gsub("[\r\n]", "", unlist(name)))
name <- str_trim(sapply(strsplit(name, " \\("), "[[", 1))
first_name <- str_trim(sapply(strsplit(name, ","), "[[", 2))
last_name <- str_trim(sapply(strsplit(name, ","), "[[", 1))
all$rep_first_name <- first_name
all$rep_last_name <- last_name
person <- str_split(str_trim(gsub("[^0-9\\.]", " ", all$Personalia)), "[[:space:]]{1,100}")
all$birth <- sapply(person, "[[", 1)
all$death <- unlist(lapply(person, function(x) ifelse(length(x) > 1, x[2], NA)))
all$death <- ifelse(nchar(all$death) == 4, NA, all$death)
all$death <- ifelse(nchar(all$death) == 0, NA, all$death)
# Used to validate that the dates are correct
# bide <- sapply(strsplit(all$name_birth, "[[:space:]]{2,100}"), "[[", 2)
# bide <- gsub("\\(|\\)", "", bide)
# bide <- strsplit(bide, "\\-")
# bide <- plyr::rbind.fill(lapply(bide, function(x) as.data.frame(t(x))))
# names(bide) <- c("birth", "death")
rm(bide, hm, test, test2, bi_de, bios, bios_split, bios_all, bios_block, bios_raw, first_name,
last_name, html_files, html_path, id_tags, m, name, person, vars, vars_pattern)
all$death <- NULL
all$birth <- NULL
person <- str_split(str_trim(gsub("[^0-9\\.]", " ", all$Personalia)), "[[:space:]]{1,100}")
all$rep_birth <- sapply(person, "[[", 1)
all$rep_death <- unlist(lapply(person, function(x) ifelse(length(x) > 1, x[2], NA)))
all$rep_death <- ifelse(nchar(all$rep_death) == 4, NA, all$rep_death)
all$rep_death <- ifelse(nchar(all$rep_death) == 0, NA, all$rep_death)
rm(bios, bios_split, bios_all, bios_block, bios_raw, first_name,
last_name, html_files, html_path, id_tags, m, name, person, vars, vars_pattern)
View(all)
rm(list = ls());cat("\014");gc()
# install.packages("./Data/uacd/uacd_0.14.tar.gz", repos = NULL)
library(stringr);library(uacd);library(dplyr);library(rvest);library(parallel);library(zoo)
source("./Scripts/cab_prep.R")
source("./Scripts/rep_df.R")
source("./Scripts/seats_prep.R")
source("./Scripts/taler_prep.R")
wrapup <- expand.grid(cabinet_short = norCabinet$cabinet_short, party_id = levels(factor(reps$party_id)))
wrapup <- merge(x = wrapup, y = norCabinet, by = "cabinet_short", all.x = TRUE)
wrapup$role <- NA
for(i in 1:nrow(wrapup)){
wrapup$role[i] <- ifelse(grepl(wrapup$party_id[i], wrapup$CabinetPartiesNor[i])==TRUE, "Cabinet", "Opposition")
}
fullname <- unique(reps[, c("party_id", "party_name", "session")])
wrapup <- merge(x = wrapup, y = fullname, by = c("party_id", "session"))
wrapup <- merge(x = wrapup, y = seats, by =c("party_name", "session"))
wrapup <- arrange(wrapup, session, cabinet_short, party_id)
names(wrapup)
wrapup <- wrapup[, c("party_id", "session", "seats", "role", "composition",
"cabinet_short", "From", "To", "party_name",
"parl_size", "seats_lagting", "seats_odelsting")]
wrapup$role <- ifelse(wrapup$party_id == "KrF" & wrapup$cabinet_short == "Solberg I", "Support", wrapup$role)
wrapup$role <- ifelse(wrapup$party_id == "V" & wrapup$cabinet_short == "Solberg I", "Support", wrapup$role)
wrapup <- merge(x = reps, y = wrapup, by = c("party_id", "cabinet_short", "session", "party_name"), all.x = TRUE)
rm(reps, fullname, norCabinet, seats, i)
wrapup$name <- paste(wrapup$first_name, wrapup$last_name)
wrapup <- wrapup[, c("id", "first_name", "last_name", "name",
"party_id", "party_name", "role", "seats",
"cabinet_short", "From", "To", "composition",
"gender", "birth", "death", "fylke_id", "fylke_name",
"session", "parl_size", "seats_lagting", "seats_odelsting"), ]
names(wrapup) <- c("rep_id", "rep_first_name", "rep_last_name", "rep_name",
"party_id", "party_name", "party_role", "party_seats",
"cabinet_short", "cabinet_start", "cabinet_end", "cabinet_composition",
"rep_gender", "rep_birth", "rep_death", "rep_fylke_id", "rep_fylke_name",
"parl_session", "parl_size", "party_seats_lagting", "party_seats_odelsting")
cab_name_date <- wrapup %>%
group_by(cabinet_short) %>%
summarise(cabinet_start = cabinet_start[1],
cabinet_end = cabinet_end[1])
taler$cabinet_short <- NA
cab_name_by_date <- function(cabinet_name){
new <- ifelse(taler$date >= cab_name_date$cabinet_start[which(cab_name_date$cabinet_short == cabinet_name)] &
taler$date <= cab_name_date$cabinet_end[which(cab_name_date$cabinet_short == cabinet_name)],
cabinet_name, taler$cabinet_short)
return(new)
}
taler$cabinet_short <- cab_name_by_date("Bondevik I")
taler$cabinet_short <- cab_name_by_date("Bondevik II")
taler$cabinet_short <- cab_name_by_date("Stoltenberg I")
taler$cabinet_short <- cab_name_by_date("Stoltenberg II")
taler$cabinet_short <- cab_name_by_date("Stoltenberg III")
taler$cabinet_short <- cab_name_by_date("Solberg I")
rm(cab_name_date)
party_vars <- c("party_id", "party_name", "party_role", "party_seats", "party_seats_lagting", "party_seats_odelsting",
"cabinet_short", "cabinet_start", "cabinet_end", "cabinet_composition",
"parl_session", "parl_size")
rep_vars <- c("rep_id", "rep_first_name", "rep_last_name", "rep_gender", "rep_birth", "rep_death")
wrapup_rep <- unique(wrapup[, c(setdiff(colnames(wrapup), party_vars), "party_id")])
wrapup_party <- unique(wrapup[, party_vars])
taler_meta <- merge(x = taler, y = wrapup_rep, by = c("rep_name", "party_id"), all.x = TRUE)
taler_meta <- merge(x = taler_meta, y = wrapup_party, by = c("cabinet_short", "party_id"), all.x = TRUE)
taler_meta <- taler_meta[, c("rep_id", "rep_first_name", "rep_last_name", "rep_name",
"party_id", "party_name", "party_role", "party_seats",
"cabinet_short", "cabinet_start", "cabinet_end", "cabinet_composition",
"rep_gender", "rep_birth", "rep_death", "rep_fylke_id", "rep_fylke_name",
"parl_session", "parl_size", "party_seats_lagting", "party_seats_odelsting",
"transcript", "order", "session", "time", "date", "title", "text"), ]
taler_meta <- arrange(taler_meta, rep_name, date)
fuckers <- taler_meta[which(is.na(taler_meta$rep_id) == TRUE &
duplicated(paste(taler_meta$cabinet_short, taler_meta$rep_name)) == FALSE), ]
rep_fuckers <- fuckers[duplicated(fuckers$rep_name) == FALSE, 1:27]
View(taler_meta)
View(taler_meta)
View(rep_fuckers)
all$rep_name <- paste(all$rep_first_name, all$rep_last_name)
library(stringr);library(parallel);library(rvest);library(foreach)
html_path <- "/media/martin/Data/getbio/www.stortinget.no/no/Representanter-og-komiteer/Representantene/Representantfordeling/Representant/"
html_files <- list.files(html_path)
html_files <- html_files[-which(grepl("Biography|ProcAndPubl", html_files))]
id_tags <- sapply(strsplit(html_files, "\\="), "[[", 2)
ncores <- detectCores()-2
bios_raw <- lapply(paste0(html_path, html_files), function(x) read_html(x))
# names(bios_raw) <- id_tags
bios_block <- lapply(bios_raw, function(x) (html_nodes(x, "#main-content div .article-content")))
bios_all <- mclapply(bios_block, function(x) html_text(x, trim = TRUE), mc.cores = ncores)
vars <- mclapply(bios_block, function(x) html_text(html_nodes(x, "h3")), mc.cores = ncores)
vars <- mclapply(vars, function(x) str_trim(x))
vars_pattern <- mclapply(vars, function(x) paste0(x, collapse = "|"), mc.cores = ncores)
vars_pattern <- mclapply(vars_pattern, function(x) gsub("^\\||\\|$", "", x), mc.cores = ncores)
#vars_pattern <- mclapply(vars_pattern, function(x) gsub("Litteratur", "Litteratur ", x), mc.cores = ncores)
bios_all <- mclapply(bios_all, function(x) gsub("Litteraturanmelder", "litteraturanmelder", x))
bios_all <- mclapply(bios_all, function(x) gsub("Verv Hammerfest", "verv Hammerfest", x))
bios_all <- mclapply(bios_all, function(x) gsub("Verv Amnesty", "verv Amnesty", x))
bios_all <- mclapply(bios_all, function(x) gsub("Sprog og Litteratur", "Sprog og litteratur", x))
bios_all <- mclapply(bios_all, function(x) gsub("Verv Osloregionens", "verv Osloregionens", x))
bios_all <- mclapply(bios_all, function(x) gsub("Litteraturkritiker", "litteraturkritiker", x))
bios_all <- mclapply(bios_all, function(x) gsub("Litteraturmedarbeider", "litteraturmedarbeider", x))
bios_all <- mclapply(bios_all, function(x) gsub("Verv AUF", "verv AUF", x))
bios_all <- mclapply(bios_all, function(x) gsub("Verv kirkelig", "verv kirkelig", x))
bios_all <- mclapply(bios_all, function(x) gsub("Vervet i UNIFIL", "vervet i UNIFIL", x))
bios_all <- mclapply(bios_all, function(x) gsub("Verveleder", "verveleder", x))
bios_all <- mclapply(bios_all, function(x) gsub("Verv NFF", "verv NFF", x))
bios_all <- mclapply(bios_all, function(x) gsub("Verv Romerike", "verv Romerike", x))
bios_split <- mclapply(1:length(bios_all), function(x) strsplit(bios_all[[x]], vars_pattern[[x]]), mc.cores = ncores)
bios_split <- unlist(bios_split, recursive = FALSE)
bios_split <- mclapply(bios_split, function(x) gsub("[\r\n]", "", x))
bios_split <- mclapply(bios_split, function(x) gsub("[\t]", "", x))
bios_split <- mclapply(bios_split, function(x) str_trim(x))
vars <- mclapply(vars, function(x) str_trim(x), mc.cores = ncores)
vars <- mclapply(vars, function(x) c("id_tag", x[which(nchar(x)!=0)]), mc.cores = ncores)
bios_all[[728]]
bios_split[[728]]
vars[[728]]
vars_pattern[[728]]
for(i in 1:length(vars)){
bios_split[[i]][1] <- id_tags[i]
}
bios <- mclapply(bios_split, function(x) data.frame(rbind(x)), mc.cores = ncores)
for(i in 1:length(bios)){
names(bios[[i]]) <- vars[[i]]
}
m <- levels(factor(unlist(vars)))
for(i in 1:length(bios)){
bios[[i]]$`id_tag` <- ifelse(is.null(bios[[i]]$`id_tag`), NA,
as.character(bios[[i]]$`id_tag`))
}
for(i in 1:length(bios)){
bios[[i]]$`Litteratur` <- ifelse(is.null(bios[[i]]$`Litteratur`), NA,
as.character(bios[[i]]$`Litteratur`))
}
for(i in 1:length(bios)){
bios[[i]]$`Medlemskap i delegasjoner` <- ifelse(is.null(bios[[i]]$`Medlemskap i delegasjoner`), NA,
as.character(bios[[i]]$`Medlemskap i delegasjoner`))
}
for(i in 1:length(bios)){
bios[[i]]$`Medlemskap i gruppestyrer` <- ifelse(is.null(bios[[i]]$`Medlemskap i gruppestyrer`), NA,
as.character(bios[[i]]$`Medlemskap i gruppestyrer`))
}
for(i in 1:length(bios)){
bios[[i]]$`Medlemskap i presidentskapet` <- ifelse(is.null(bios[[i]]$`Medlemskap i presidentskapet`), NA,
as.character(bios[[i]]$`Medlemskap i presidentskapet`))
}
for(i in 1:length(bios)){
bios[[i]]$`Medlemskap i regjering` <- ifelse(is.null(bios[[i]]$`Medlemskap i regjering`), NA,
as.character(bios[[i]]$`Medlemskap i regjering`))
}
for(i in 1:length(bios)){
bios[[i]]$`Medlemskap i spesialkomiteer, interne styrer og utvalg m.m.` <- ifelse(is.null(bios[[i]]$`Medlemskap i spesialkomiteer, interne styrer og utvalg m.m.`),
NA,
as.character(bios[[i]]$`Medlemskap i spesialkomiteer, interne styrer og utvalg m.m.`))
}
for(i in 1:length(bios)){
bios[[i]]$`Medlemskap i stortingskomiteer` <- ifelse(is.null(bios[[i]]$`Medlemskap i stortingskomiteer`), NA,
as.character(bios[[i]]$`Medlemskap i stortingskomiteer`))
}
for(i in 1:length(bios)){
bios[[i]]$`Personalia` <- ifelse(is.null(bios[[i]]$`Personalia`), NA,
as.character(bios[[i]]$`Personalia`))
}
for(i in 1:length(bios)){
bios[[i]]$`Stortingsperioder` <- ifelse(is.null(bios[[i]]$`Stortingsperioder`), NA,
as.character(bios[[i]]$`Stortingsperioder`))
}
for(i in 1:length(bios)){
bios[[i]]$`Utdanning og yrkeserfaring` <- ifelse(is.null(bios[[i]]$`Utdanning og yrkeserfaring`), NA,
as.character(bios[[i]]$`Utdanning og yrkeserfaring`))
}
for(i in 1:length(bios)){
bios[[i]]$`Vararepresentasjoner` <- ifelse(is.null(bios[[i]]$`Vararepresentasjoner`), NA,
as.character(bios[[i]]$`Vararepresentasjoner`))
}
for(i in 1:length(bios)){
bios[[i]]$`Verv` <- ifelse(is.null(bios[[i]]$`Verv`), NA,
as.character(bios[[i]]$`Verv`))
}
all <- do.call(rbind, bios)
rownames(all) <- 1:nrow(all)
name <- mclapply(bios_raw, function(x) (x %>% html_nodes("h1") %>% html_text()), mc.cores = ncores)
name <- str_trim(gsub("[\r\n]", "", unlist(name)))
name <- str_trim(sapply(strsplit(name, " \\("), "[[", 1))
first_name <- str_trim(sapply(strsplit(name, ","), "[[", 2))
last_name <- str_trim(sapply(strsplit(name, ","), "[[", 1))
all$rep_first_name <- first_name
all$rep_last_name <- last_name
person <- str_split(str_trim(gsub("[^0-9\\.]", " ", all$Personalia)), "[[:space:]]{1,100}")
all$rep_birth <- sapply(person, "[[", 1)
all$rep_death <- unlist(lapply(person, function(x) ifelse(length(x) > 1, x[2], NA)))
all$rep_death <- ifelse(nchar(all$rep_death) == 4, NA, all$rep_death)
all$rep_death <- ifelse(nchar(all$rep_death) == 0, NA, all$rep_death)
# Used to validate that the dates are correct
# bide <- sapply(strsplit(all$name_birth, "[[:space:]]{2,100}"), "[[", 2)
# bide <- gsub("\\(|\\)", "", bide)
# bide <- strsplit(bide, "\\-")
# bide <- plyr::rbind.fill(lapply(bide, function(x) as.data.frame(t(x))))
# names(bide) <- c("birth", "death")
all$rep_name <- paste(all$rep_first_name, all$rep_last_name)
rm(bios, bios_split, bios_all, bios_block, bios_raw, first_name,
last_name, html_files, html_path, id_tags, m, name, person, vars, vars_pattern)
all$rep_name[1:10]
View(rep_fuckers)
View(all)
library(stringr);library(parallel);library(rvest);library(foreach)
html_path <- "/media/martin/Data/getbio/www.stortinget.no/no/Representanter-og-komiteer/Representantene/Representantfordeling/Representant/"
html_files <- list.files(html_path)
html_files <- html_files[-which(grepl("Biography|ProcAndPubl", html_files))]
id_tags <- sapply(strsplit(html_files, "\\="), "[[", 2)
ncores <- detectCores()-2
bios_raw <- lapply(paste0(html_path, html_files), function(x) read_html(x))
# names(bios_raw) <- id_tags
bios_block <- lapply(bios_raw, function(x) (html_nodes(x, "#main-content div .article-content")))
bios_all <- mclapply(bios_block, function(x) html_text(x, trim = TRUE), mc.cores = ncores)
vars <- mclapply(bios_block, function(x) html_text(html_nodes(x, "h3")), mc.cores = ncores)
vars <- mclapply(vars, function(x) str_trim(x))
vars_pattern <- mclapply(vars, function(x) paste0(x, collapse = "|"), mc.cores = ncores)
vars_pattern <- mclapply(vars_pattern, function(x) gsub("^\\||\\|$", "", x), mc.cores = ncores)
#vars_pattern <- mclapply(vars_pattern, function(x) gsub("Litteratur", "Litteratur ", x), mc.cores = ncores)
bios_all <- mclapply(bios_all, function(x) gsub("Litteraturanmelder", "litteraturanmelder", x))
bios_all <- mclapply(bios_all, function(x) gsub("Verv Hammerfest", "verv Hammerfest", x))
bios_all <- mclapply(bios_all, function(x) gsub("Verv Amnesty", "verv Amnesty", x))
bios_all <- mclapply(bios_all, function(x) gsub("Sprog og Litteratur", "Sprog og litteratur", x))
bios_all <- mclapply(bios_all, function(x) gsub("Verv Osloregionens", "verv Osloregionens", x))
bios_all <- mclapply(bios_all, function(x) gsub("Litteraturkritiker", "litteraturkritiker", x))
bios_all <- mclapply(bios_all, function(x) gsub("Litteraturmedarbeider", "litteraturmedarbeider", x))
bios_all <- mclapply(bios_all, function(x) gsub("Verv AUF", "verv AUF", x))
bios_all <- mclapply(bios_all, function(x) gsub("Verv kirkelig", "verv kirkelig", x))
bios_all <- mclapply(bios_all, function(x) gsub("Vervet i UNIFIL", "vervet i UNIFIL", x))
bios_all <- mclapply(bios_all, function(x) gsub("Verveleder", "verveleder", x))
bios_all <- mclapply(bios_all, function(x) gsub("Verv NFF", "verv NFF", x))
bios_all <- mclapply(bios_all, function(x) gsub("Verv Romerike", "verv Romerike", x))
bios_split <- mclapply(1:length(bios_all), function(x) strsplit(bios_all[[x]], vars_pattern[[x]]), mc.cores = ncores)
bios_split <- unlist(bios_split, recursive = FALSE)
bios_split <- mclapply(bios_split, function(x) gsub("[\r\n]", "", x))
bios_split <- mclapply(bios_split, function(x) gsub("[\t]", "", x))
bios_split <- mclapply(bios_split, function(x) str_trim(x))
vars <- mclapply(vars, function(x) str_trim(x), mc.cores = ncores)
vars <- mclapply(vars, function(x) c("rep_id", x[which(nchar(x)!=0)]), mc.cores = ncores)
bios_all[[728]]
bios_split[[728]]
vars[[728]]
vars_pattern[[728]]
for(i in 1:length(vars)){
bios_split[[i]][1] <- id_tags[i]
}
bios <- mclapply(bios_split, function(x) data.frame(rbind(x)), mc.cores = ncores)
for(i in 1:length(bios)){
names(bios[[i]]) <- vars[[i]]
}
m <- levels(factor(unlist(vars)))
for(i in 1:length(bios)){
bios[[i]]$`rep_id` <- ifelse(is.null(bios[[i]]$`rep_id`), NA,
as.character(bios[[i]]$`rep_id`))
}
for(i in 1:length(bios)){
bios[[i]]$`Litteratur` <- ifelse(is.null(bios[[i]]$`Litteratur`), NA,
as.character(bios[[i]]$`Litteratur`))
}
for(i in 1:length(bios)){
bios[[i]]$`Medlemskap i delegasjoner` <- ifelse(is.null(bios[[i]]$`Medlemskap i delegasjoner`), NA,
as.character(bios[[i]]$`Medlemskap i delegasjoner`))
}
for(i in 1:length(bios)){
bios[[i]]$`Medlemskap i gruppestyrer` <- ifelse(is.null(bios[[i]]$`Medlemskap i gruppestyrer`), NA,
as.character(bios[[i]]$`Medlemskap i gruppestyrer`))
}
for(i in 1:length(bios)){
bios[[i]]$`Medlemskap i presidentskapet` <- ifelse(is.null(bios[[i]]$`Medlemskap i presidentskapet`), NA,
as.character(bios[[i]]$`Medlemskap i presidentskapet`))
}
for(i in 1:length(bios)){
bios[[i]]$`Medlemskap i regjering` <- ifelse(is.null(bios[[i]]$`Medlemskap i regjering`), NA,
as.character(bios[[i]]$`Medlemskap i regjering`))
}
for(i in 1:length(bios)){
bios[[i]]$`Medlemskap i spesialkomiteer, interne styrer og utvalg m.m.` <- ifelse(is.null(bios[[i]]$`Medlemskap i spesialkomiteer, interne styrer og utvalg m.m.`),
NA,
as.character(bios[[i]]$`Medlemskap i spesialkomiteer, interne styrer og utvalg m.m.`))
}
for(i in 1:length(bios)){
bios[[i]]$`Medlemskap i stortingskomiteer` <- ifelse(is.null(bios[[i]]$`Medlemskap i stortingskomiteer`), NA,
as.character(bios[[i]]$`Medlemskap i stortingskomiteer`))
}
for(i in 1:length(bios)){
bios[[i]]$`Personalia` <- ifelse(is.null(bios[[i]]$`Personalia`), NA,
as.character(bios[[i]]$`Personalia`))
}
for(i in 1:length(bios)){
bios[[i]]$`Stortingsperioder` <- ifelse(is.null(bios[[i]]$`Stortingsperioder`), NA,
as.character(bios[[i]]$`Stortingsperioder`))
}
for(i in 1:length(bios)){
bios[[i]]$`Utdanning og yrkeserfaring` <- ifelse(is.null(bios[[i]]$`Utdanning og yrkeserfaring`), NA,
as.character(bios[[i]]$`Utdanning og yrkeserfaring`))
}
for(i in 1:length(bios)){
bios[[i]]$`Vararepresentasjoner` <- ifelse(is.null(bios[[i]]$`Vararepresentasjoner`), NA,
as.character(bios[[i]]$`Vararepresentasjoner`))
}
for(i in 1:length(bios)){
bios[[i]]$`Verv` <- ifelse(is.null(bios[[i]]$`Verv`), NA,
as.character(bios[[i]]$`Verv`))
}
all <- do.call(rbind, bios)
rownames(all) <- 1:nrow(all)
name <- mclapply(bios_raw, function(x) (x %>% html_nodes("h1") %>% html_text()), mc.cores = ncores)
name <- str_trim(gsub("[\r\n]", "", unlist(name)))
name <- str_trim(sapply(strsplit(name, " \\("), "[[", 1))
first_name <- str_trim(sapply(strsplit(name, ","), "[[", 2))
last_name <- str_trim(sapply(strsplit(name, ","), "[[", 1))
all$rep_first_name <- first_name
all$rep_last_name <- last_name
person <- str_split(str_trim(gsub("[^0-9\\.]", " ", all$Personalia)), "[[:space:]]{1,100}")
all$rep_birth <- sapply(person, "[[", 1)
all$rep_death <- unlist(lapply(person, function(x) ifelse(length(x) > 1, x[2], NA)))
all$rep_death <- ifelse(nchar(all$rep_death) == 4, NA, all$rep_death)
all$rep_death <- ifelse(nchar(all$rep_death) == 0, NA, all$rep_death)
# Used to validate that the dates are correct
# bide <- sapply(strsplit(all$name_birth, "[[:space:]]{2,100}"), "[[", 2)
# bide <- gsub("\\(|\\)", "", bide)
# bide <- strsplit(bide, "\\-")
# bide <- plyr::rbind.fill(lapply(bide, function(x) as.data.frame(t(x))))
# names(bide) <- c("birth", "death")
all$rep_name <- paste(all$rep_first_name, all$rep_last_name)
test <- merge(x = rep_fuckers, y = all[,c("rep_name", "rep_id")], by = "rep_name", all.x = TRUE)
rm(bios, bios_split, bios_all, bios_block, bios_raw, first_name,
last_name, html_files, html_path, id_tags, m, name, person, vars, vars_pattern)
View(test)
test <- merge(x = rep_fuckers[,"rep_name"], y = all[,c("rep_name", "rep_id")], by = "rep_name", all.x = TRUE)
test <- merge(x = rep_fuckers[,c("rep_name")], y = all[,c("rep_name", "rep_id")], by = "rep_name", all.x = TRUE)
rep_fuckers[,c("rep_name")]
test <- merge(x = rep_fuckers[,c("rep_name", "title")], y = all[,c("rep_name", "rep_id")], by = "rep_name", all.x = TRUE)
View(test)
test2 <- test[which(is.na(test$rep_id)), ]
View(test2)
taler_meta[which(taler_meta$rep_name == "André Dahl"), 1:27]
wrapup[1,1]
wrapup[1]
wrapup[,1]
wrapup[,"rep_name"]
grepl("Dahl", wrapup$rep_name)
wrapup[which(grepl("Dahl", wrapup$rep_name)), ]
taler[which(grepl("Dahl", taler$rep_name)), ]
cat("\014");gc()
taler$rep_name[which(grepl("André Dahl", taler$rep_name))]
taler$rep_name <- as.character(taler$rep_name)
taler$rep_name[which(grepl("André Dahl", taler$rep_name))]
taler$rep_name[which(grepl("Skjelstad", taler$rep_name))]
taler$rep_name[which(grepl("Lahnstein", taler$rep_name))]
levels(facor(taler$rep_name[which(grepl("Lahnstein", taler$rep_name))]))''
levels(facor(taler$rep_name[which(grepl("Lahnstein", taler$rep_name))]))
levels(factor(taler$rep_name[which(grepl("Lahnstein", taler$rep_name))]))
taler$rep_name[which(grepl("Enger", taler$rep_name))]
wrapup$rep_name[which(grepl("Enger", wrapup$rep_name))]
taler$rep_name[which(grepl("Grande", taler$rep_name))]
levels(factor(taler$rep_name[which(grepl("Schmidt", taler$rep_name))]))
levels(factor(taler$rep_name[which(grepl("Haugland", taler$rep_name))]))
levels(factor(wrapup$rep_name[which(grepl("Haugland", wrapup$rep_name))]))
wrapup$rep_name[which(grepl("Haugland", wrapup$rep_name))]
wrapup$rep_name[which(grepl("Bruun-Gundersen", wrapup$rep_name))]
wrapup$rep_name[which(grepl("Gundersen", wrapup$rep_name))]
levels(factor(wrapup$rep_name[which(grepl("Haugland", wrapup$rep_name))]))
levels(factor(taler$rep_name[which(grepl("Haugland", taler$rep_name))]))
taler$rep_name[which(grepl("Gundersen", taler$rep_name))]
taler[which(grepl("Åshild Bruun-Gundersen", taler$rep_name)), 1:27]
taler[which(grepl("Åshild Bruun-Gundersen", taler$rep_name)), 1:10]
taler[which(grepl("Åshild Karoline Haugland", taler$rep_name)), 1:10]
